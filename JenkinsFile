pipeline{
  agent any
  tools{
       maven 'mymaven'
       jdk 'JDK11'
   }
    environment {
      AWS_REGION = 'us-east-2'
      AWS_DEFAULT_REGION = 'us-east-2'

  }
  stages {
    stage('Build'){
       steps {
                sh'mvn clean package'
                    
                
            }
     }
    stage('Test'){
      steps{
        sh 'mvn test'
      }
      }
      stage('sonar-analysis')
      {
        steps {
                withSonarQubeEnv('mysonar') {
                 
                        sh 'mvn sonar:sonar'
                    
                }
            }
      }
      stage('SonarQube Quality Gate') { 
            steps{
              sleep(60)
                timeout(time: 1, unit: 'HOURS') { 
                    script{
                        def qg = waitForQualityGate() 
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                         }
                    }
                    
                }
            }
        }
     stage('collect artifact'){
     steps{
     archiveArtifacts artifacts: 'target/*.jar', followSymlinks: false
     }
     }
     stage('deploy to artifactory')
     {
     steps{
     
     rtUpload (
    serverId: 'artifactory-server',
    spec: '''{
          "files": [
            {
              "pattern": "target/*.jar",
              "target": "art-doc-dev-loc"
            }
         ]
    }''',

)
     }}
     stage('download from artifactory')
         {
            steps{
     
                rtDownload (
                    serverId: 'artifactory-server',
                    spec: '''{
                    "files": [
                         {
                             "pattern": "art-doc-dev-loc/",
                             "target": ""
                        }
                     ]
                }''',
 
)
     }}
     stage('upload to s3')
     {
         steps{
             withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: '48ef093d-f474-480b-8514-4c51231f0f60', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
            s3Upload(pathStyleAccessEnabled: true, payloadSigningEnabled: true,file:'TeamManagement-0.0.1-SNAPSHOT.jar', bucket:'cloud-945742669624-bucket', path:'var/jenkins_home/workspace/artifactory-pipeline/target/TeamManagement-0.0.1-SNAPSHOT.jar')

}
         }
     }

     stage("deploy to ec2"){
       steps{
            sshagent(['fb6287dd-0b69-406a-88b3-16309ea4d52a']){
                    sh 'scp -r /var/jenkins_home/workspace/artifactory-pipeline/target/*.jar ubuntu@52.14.63.252:/home/ubuntu/artifacts'
        }
       }
     }
       
      
  
  }
  post {
      
        failure {
            echo 'I failed :('
              mail to: 'kunagg25@gmail.com',
             subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
             body: "Something is wrong with ${env.BUILD_URL}"
        }
        
    }
  }
